âš¡ What is `NPM`?
- It is a widely used package manager for JavaScript programming language. It is the default package manager for the Node.js runtime environment. npm serves as a central repository for downloading and managing open-source JavaScript packages and libraries. It also provides a command-line interface (CLI) for developers to install, update, and manage packages within their projects.
- It offers comprehensive package management, dependency resolution, versioning, scripting, security features, and community collaboration.

âš¡ What is `Parcel/Webpack`? Why do we need it?
- Bundlers are tools used to combine multiple separate modules, files, or assets into a single bundle. They
- do module bundling (they bundle JavaScript modules into single or multiple files for deployment)
- do dependency resolution (they analyze the dependencies between modules so that modules can be bundled in the correct order)
- do code transformation (they transpile modern JavaScript code into backward compatible code using tools like babel)
- do asset management (they process assets, optimize them for performance and include them in bunlde)
- do code splitting (they split the application code into smaller bundles so as to reduce the initial load time by loading only the necessary code upfornt and defering the loading of other parts untill they are needed)
- do tree shaking (also called dead code elimination) (they eliminate the dead code or unused modules from the bundle after analyzing the dependency graph so as to reduce the size of bundle in order to reduce the intial load time)

âš¡ What is `.parcel-cache`
- parcel caches some intermediate artifacts and build related information so as to speed up subsequent builds.
- by caching parcel avoid repeating expensive operations 

âš¡ What is `npx` ?
- stands for node package execute
- is used for execution of packages
- automatically installs the specified package (if not already installed) in a temporary directory, executes the package and then cleans up the temporary installation

âš¡ What is difference between `dependencies` vs `devDependencies`
- covered in scrit.js

âš¡ What is Tree Shaking?
- covered above

âš¡ What is Hot Module Replacement?
- When a file in your project is modified, HMR identifies which modules have been changed.
- Instead of refreshing the entire page, HMR updates only the modules that have changed. It applies the updates in real-time, preserving the current application state.
- HMR ensures that the application state is maintained during the update process. This means that any data or user interactions currently present in the application are not lost when modules are replaced.

âš¡ List down your favourite 5 superpowers of Parcel and describe any 3 of them in your own words.

âš¡ What is `.gitignore`? What should we add and not add into it?
- The .gitignore file is a configuration file used by the version control system Git to specify intentionally untracked files that Git should ignore. 

âš¡ What is the difference between `package.json` and `package-lock.json`
- package.json
- package.json is a metadata file for your project that lists various information such as project name, version, dependencies, scripts, and more.
- It typically contains information like project name, version, entry point, dependencies, and scripts.
- Developers manually add, remove, or update dependencies in package.json using tools like npm or yarn.
- When you run npm install, it installs dependencies listed in package.json and updates package-lock.json (or yarn.lock if using Yarn) if it exists.
- It's intended for human consumption and manual editing.
- package-lock.json
- package-lock.json is automatically generated by npm and serves as a record of the exact versions of dependencies installed in your project.
- It locks the version of each installed package to ensure that every developer working on the project and every environment running the project will use exactly the same versions of dependencies.
- This file is used to provide a consistent and reproducible dependency tree across different machines and environments.
- It contains a full dependency tree with resolved versions and integrity hashes of every package installed.
- package-lock.json is used internally by npm and should not be edited manually. It is intended to be a machine-readable record of the dependency tree.
- It is automatically created and updated by npm when you run npm install. - It ensures that you get the same dependencies as other developers or production environments, preventing issues caused by different versions of dependencies being installed.

âš¡ Why should I not modify `package-lock.json`?
- covered above

âš¡ What is `node_modules` ? Is it a good idea to push that on git?
- is the directory that stores all the dependencies of a Node.js project
- it isn't pushed to git
- because node_modules can be regenerated easily by running the command npm install 

âš¡ What is the `dist` folder?
- contains the output of the bundling process
- it stores the bundled and optimized files
- it stores the production ready version of our application

âš¡ What is `browserlists` ðŸŸ¥ 

âš¡ Read about dif bundlers: vite, webpack, parcel
- vite is known for it's extremely fast development server
- parcel is known for zero configuration approach
- webpack is known for its extensive configuration options

âš¡ Read about: ^ - caret and ~ - tilda ðŸŸ¥

âš¡ Read about Script types in html (MDN Docs) ðŸŸ¥

EXTRAS:

âš¡ MINIFICATION
- Minification reduces the file size of your output bundles by removing whitespace, renaming variables to shorter names, and many other optimizations.
- Parcel uses SWC to minify JavaScript, lightningcss for CSS, htmlnano for HTML, and svgo for SVG.
- 